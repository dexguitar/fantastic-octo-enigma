name: Integration Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  integration-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          NODE_ENV=test
          API_PORT=3000
          API_HOST=0.0.0.0
          KAFKA_CLIENT_ID=document-processor-test
          KAFKA_BROKERS=localhost:9092
          KAFKA_GROUP_ID=document-processing-test-group
          TOPIC_IMAGE_PROCESSING=test-document-image-processing
          TOPIC_TEXT_PROCESSING=test-document-text-processing
          TOPIC_PROCESSING_RESULTS=test-document-processing-results
          DATABASE_URL=postgresql://admin:admin123@localhost:5432/document_processing_test
          DB_HOST=localhost
          DB_PORT=5432
          DB_NAME=document_processing_test
          DB_USER=admin
          DB_PASSWORD=admin123
          IMAGE_SERVICE_PORT=3001
          IMAGE_SERVICE_HOST=0.0.0.0
          TEXT_SERVICE_PORT=3002
          TEXT_SERVICE_HOST=0.0.0.0
          EOF

      - name: Start infrastructure services
        run: |
          # Start only the infrastructure services for testing
          cat > docker-compose.test.yml << EOF
          version: '3.8'
          services:
            zookeeper:
              image: confluentinc/cp-zookeeper:7.3.0
              environment:
                ZOOKEEPER_CLIENT_PORT: 2181
                ZOOKEEPER_TICK_TIME: 2000
              ports:
                - '2181:2181'
                
            kafka:
              image: confluentinc/cp-kafka:7.3.0
              depends_on:
                - zookeeper
              ports:
                - '9092:9092'
              environment:
                KAFKA_BROKER_ID: 1
                KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
                KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
                KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
                KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
                KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
                
            postgres:
              image: postgres:15-alpine
              environment:
                POSTGRES_DB: document_processing_test
                POSTGRES_USER: admin
                POSTGRES_PASSWORD: admin123
              ports:
                - '5432:5432'
              volumes:
                - ./src/shared/database/init.sql:/docker-entrypoint-initdb.d/init.sql
          EOF

          docker-compose -f docker-compose.test.yml up -d

      - name: Wait for services to be ready
        run: |
          # Wait for PostgreSQL
          timeout 60 bash -c 'until docker-compose -f docker-compose.test.yml exec -T postgres pg_isready -U admin -d document_processing_test; do sleep 2; done'

          # Wait for Kafka
          timeout 60 bash -c 'until docker-compose -f docker-compose.test.yml exec -T kafka kafka-topics --bootstrap-server localhost:9092 --list; do sleep 2; done'

      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: postgresql://admin:admin123@localhost:5432/document_processing_test

      - name: Start services in background
        run: |
          npm run start:api &
          npm run start:image &
          npm run start:text &

          # Wait for services to start
          sleep 10

          # Health check
          curl -f http://localhost:3000/health || exit 1
          curl -f http://localhost:3001/health || exit 1
          curl -f http://localhost:3002/health || exit 1
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://admin:admin123@localhost:5432/document_processing_test
          KAFKA_BROKERS: localhost:9092

      - name: Run integration tests
        run: |
          # Add any integration test commands here
          echo "Running integration tests..."
          # Example: npm run test:integration

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v
          pkill -f "node src/" || true
